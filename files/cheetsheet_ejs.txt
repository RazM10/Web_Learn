0.
npm init
npm install express ejs 
npm install express-ejs-layouts // if you need a common layout.ejs file
npm install nodemon --save-dev

--- server.js ,without common layout.ejs---
const express = require('express');
const app = express();

app.set('view-engine','ejs');

// middleware
app.use(express.json());
app.use(express.static(__dirname + '/public/')); // <link rel="stylesheet" href="/assets/css/argon.css?v=1.2.0" type="text/css">
app.use(express.urlencoded({extended: false})); //*** important for get data in server, when form data post from ejs page.

// routes
app.get('/', async (req,res)=>{
    res.render('layout.ejs');
});

app.listen(3000, (req, res) => {
    console.log("Listing to port 3000")
});


--- server.js with layout.ejs ---
const express = require('express');
const expressLayouts = require('express-ejs-layouts');

const app = express();

app.use(expressLayouts);
app.set('view engine','ejs');

// middleware
app.use(express.json());
app.use(express.static(__dirname + '/public/'));
app.use(express.urlencoded({extended: false})); //*** important for get data in server, when form data post from ejs page.

// routes
app.get('/', async (req,res)=>{
    res.render('home');
});

app.listen(3000, (req, res) => {
    console.log("Listing to port 3000")
});


--- server.js, with layout.ejs. another way ---
const express = require('express');
const expressLayouts = require('express-ejs-layouts');
const path = require('path');

const app = express();

app.use(expressLayouts);
app.set('view engine', 'ejs');
app.use(express.urlencoded({extended: true})); //*** important for get data in server, when form data post from ejs page.
app.use(express.json());

app.use(express.static(path.join(__dirname, 'public')));

// routes
app.get('/', async (req,res)=>{
    res.render('home.ejs');
});

app.listen(3000, (req, res) => {
    console.log("Listing to port 3000")
});


	*** use default custom layout without default layout.ejs ***
		const loginView = (req, res) => {
	    		res.render('login.view.ejs', {layout: 'loginLayout.ejs'});
		}


0.1.
// to store data locally
npm install node-localstorage

// create a folder 'scracth' in root folder
then do follow next instructions

//add this in every file, where it is used
const {LocalStorage}  = require('node-localstorage');
const localstorage = new LocalStorage('./scracth');

// use for save data
const obj = {
    email: req.body.email,
    password: req.body.password
};
localstorage.setItem('user', JSON.stringify(obj));

// use for get data
const data = localstorage.getItem('user') !== null ? JSON.parse(localstorage.getItem('user')) : null;
  if (data !== null) {
    res.render('home');        
  }else {
    res.redirect('/login');
}

// use for remove data
localstorage.removeItem('user');

1.
// Route for post data to save in bd
router.post('/register',checkNotAuthenticated, async(req,res)=>{

    const getedUser= usersArray.find(user => user.email === req.body.email);

    if(getedUser == null){
        try {
            const hashedPassword = await bcrypt.hash(req.body.password, 10);
    
            const user = new User({
                name: req.body.name,
                email: req.body.email,
                password: hashedPassword,
                address: req.body.address
            });
    
            const savedUser = await user.save();
            res.redirect('/user/login');
        } catch (error) {
            res.redirect('/user/registration');
        }

    }else{
        res.render('register.ejs', { r_message: "Todo", failMsg: req.body.email+" is already exist." });
    }
});

// Form for Post route to save data
<div id="login">
    <div class="container">
        <div id="login-row" class="row justify-content-center align-items-center">
            <div id="login-column" class="col-md-5">
                    <form action="/user/register" method="post">
                        <h4 class="text-center"><%= r_message %></h4>
                        <h3 class="text-center">Registration</h3>
                        <div class="form-group">
                            <p style="color: red;">
                                <% if (failMsg !== " ") { %>
                                    <%= failMsg %>
                                <% } %>
                            </p>
                            <label for="name">Name</label><br>
                            <input type="text" name="name" id="name" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="email">Email</label>
                            <input type="email" name="email" id="email" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="password">Password</label>
                            <input type="password" name="password" id="password" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="address">Address</label>
                            <input type="text" name="address" id="address" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <input type="submit" name="submit" class="btn btn-info btn-md" style="background-color:#333333 !important" value="Registration">
                        </div>
                        <div id="register-link" class="text-right">
                            <a href="/user/login" style="color:#164072 !important">Already Registered?</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>



// use this middleware in route page, otherwise will not work 
// middleware for to convert ejs's POST request to router's DELETE/PUT request
const methodOverride = require('method-override');
router.use(methodOverride('_method'));

// update route
router.put('/update2', async (req, res)=> {
    var hiddenName = req.body.hiddenName;
    console.log("Bro hidden value is: "+hiddenName);
    try {
        const updateUser = await User.updateOne(
            {name: req.body.name},
            {$set: {name: req.body.newName}},{returnOriginal : true},(err,result) => {
                if(err)
                    console.log(err);
                else
                    res.redirect('/euser/taskShow');
            }
        );
    } catch (error) {
        res.send(error);
    }
});


// For update value. you can also pass a hidden field instead of using url params
<div class="container">
    <div class="row">
        <div class="col-lg-2"></div>
        <div class="col-lg-8">
            <form id="form" action="/euser/update2?_method=PUT" method="POST">
                <div class="form-group">
                    <input type="hidden" name="hiddenName" value="<%= userArray[0]['name']%>">
                    <label for="todo" style="color: #DDBE15;font-size: 30px;">Enter User name for update</label>
                    <input type="text" class="form-control" name="name" id="name" placeholder="Enter User name for update"><br>
                    <input type="text" class="form-control" name="newName" id="newName" placeholder="Enter New User name for update"><br>
                    <button type="submit" class="btn btn-primary" style="background-color: #DDBE15;">Update</button>
                    <br><br><br><br>
                </div>
                
            </form>
        </div>
        <div class="col-lg-2"></div>
    </div>
</div>


// Delete route
router.delete('/logout', (req, res) => {
    console.log("From Delete route");
    res.redirect('/euser/taskShow');
});

// Form For delete route 
<form action="/euser/logout?_method=DELETE" method="POST">
    <button type="submit">Log Out</button>
</form>


2.
// Open Home page, when start server
router.get('/', async (req,res)=>{
    const users = await User.find();

    res.render('index.ejs', {
        projectName: "Todo",
        pageTitle: "Sign In",
        userArray: users
    });
});

// For loop to iterate array of data
<table>
	<% for(var i = 0; i < userArray.length; i++){ %>
		<tr>
			<td>
				<div class="container">
					<div class="row" style="color: aliceblue;">
						<div class="col-md-4" style="margin-left: 9px;">
							<%= userArray[i].email %>
						</div>
						<div class="col-md-4" style="margin-left:30%;">
							<%= userArray[i].name %>
						</div>
						<div class="col-md-4"></div>
					</div>
				</div>
			</td>
			<!-- <td><%= userArray[i].name %></td> -->
		</tr>
	<% } %>
</table>

// Use of conditional statement in ejs file
<p style="color: red;">
    <% if (failMsg !== " ") { %>
        <%= failMsg %>
    <% } %>
</p>

3.
router.get('/login',checkNotAuthenticated,(req,res)=>{
    getAllUser();
    res.render('login.ejs');
});

<div id="register-link" class="text-right">
	<a href="/user/login" style="color:#164072 !important">Already Registered?</a>
</div>


4.
<a href="/user/profile" class="textColor"><%= name %></a>

// Route. it will navigate you to profile page
router.get('/profile', checkAuthenticated,(req,res)=>{
    res.render('profile.ejs',{name: req.user.name, email: req.user.email, address: req.user.address});
});

5.
// Setup ejs: installl ejs and write following in app.js files to get access of ejs tamplate & css/js file
app.set('view-engine','ejs');

//middleware
app.use(express.json());
app.use(express.static(__dirname + '/'));
app.use(express.urlencoded({extended: false}));
app.use('/user', usersRoute);
app.use('/euser', eUsersRoutes);

6.
// Add css file in ejs template. keep file in: root/css/bootstrap.min.css
<link rel="stylesheet" href="../css/bootstrap.min.css">

// Add js file in ejs template. keep file in: root/js/main.js
<script src="../js/main.js"></script>

7.
Install specific version of package
	npm install mongoose@6.0.4
*TextField undefined error removed by installing 5.9.17 version of mongoose
	npm install mongoose@5.9.17




